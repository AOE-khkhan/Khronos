#
# sphinxbase
#

find_package(sphinxbase)
if (${SPHINXBASE_FOUND})
    include_directories(${SPHINXBASE_INCLUDE_DIR}/sphinxbase/)
else ()
    ExternalProject_Add(
        sphinxbase
        GIT_REPOSITORY      "https://github.com/syb0rg/sphinxbase.git"
        SOURCE_DIR          ${CMAKE_BINARY_DIR}/lib/sphinxbase
        UPDATE_COMMAND      ""
        INSTALL_COMMAND     ""
        BUILD_IN_SOURCE     ON
        LOG_DOWNLOAD        ON
        LOG_UPDATE          ON
        LOG_CONFIGURE       ON
        LOG_BUILD           ON
        LOG_TEST            ON
        LOG_INSTALL         ON
    )
    ExternalProject_Get_Property(sphinxbase SOURCE_DIR)
    ExternalProject_Get_Property(sphinxbase BINARY_DIR)
    set(SPHINXBASE_SOURCE_DIR ${SOURCE_DIR})
    set(SPHINXBASE_BINARY_DIR ${BINARY_DIR})
    if (APPLE)
        set(SPHINXBASE_LIBRARIES ${SPHINXBASE_SOURCE_DIR}/libsphinxbase.dylib)
    elseif (UNIX)
        set(SPHINXBASE_LIBRARIES ${SPHINXBASE_SOURCE_DIR}/libsphinxbase.so)
    endif ()
    set(DEPENDENCIES ${DEPENDENCIES} sphinxbase)
    include_directories(${SPHINXBASE_SOURCE_DIR}/include)
endif ()
set(LIBS ${LIBS} ${SPHINXBASE_LIBRARIES})

#
# pocketsphinx
#

find_package(pocketsphinx)
if (${POCKETSPHINX_FOUND})
    include_directories(${POCKETSPHINX_INCLUDE_DIR}/pocketsphinx/)
    add_definitions(-DMODELDIR="/usr/local/share/pocketsphinx/model")  # more portable?
else ()
    ExternalProject_Add(
        pocketsphinx
        DEPENDS             sphinxbase
        GIT_REPOSITORY      "https://github.com/syb0rg/pocketsphinx"
        SOURCE_DIR          ${CMAKE_BINARY_DIR}/lib/pocketsphinx
        UPDATE_COMMAND      ""
        INSTALL_COMMAND     ""
        BUILD_IN_SOURCE     ON
        LOG_DOWNLOAD        ON
        LOG_UPDATE          ON
        LOG_CONFIGURE       ON
        LOG_BUILD           ON
        LOG_TEST            ON
        LOG_INSTALL         ON
        )
    ExternalProject_Get_Property(pocketsphinx SOURCE_DIR)
    ExternalProject_Get_Property(pocketsphinx BINARY_DIR)
    set(POCKETSPHINX_SOURCE_DIR ${SOURCE_DIR})
    set(POCKETSPHINX_BINARY_DIR ${BINARY_DIR})
    if (APPLE)
        set(POCKETSPHINX_LIBRARIES ${POCKETSPHINX_SOURCE_DIR}/libpocketsphinx.dylib)
    elseif (UNIX)
        set(POCKETSPHINX_LIBRARIES ${POCKETSPHINX_SOURCE_DIR}/libpocketsphinx.so)
    endif ()
    set(DEPENDENCIES ${DEPENDENCIES} pocketsphinx)
    include_directories(${POCKETSPHINX_SOURCE_DIR}/include)
    add_definitions(-DMODELDIR="${POCKETSPHINX_BINARY_DIR}/model")
endif ()
set(LIBS ${LIBS} ${POCKETSPHINX_LIBRARIES})

#
# portaudio
#

find_package(PortAudio)
if (${PORTAUDIO_FOUND})
    include_directories(${PORTAUDIO_INCLUDE_DIRS})
else ()
    ExternalProject_Add(
        PortAudio
        GIT_REPOSITORY      "https://github.com/syb0rg/PortAudio2.git"
        SOURCE_DIR          ${CMAKE_BINARY_DIR}/lib/PortAudio
        UPDATE_COMMAND      ""
        INSTALL_COMMAND     ""
        BUILD_IN_SOURCE     ON
        LOG_DOWNLOAD        ON
        LOG_UPDATE          ON
        LOG_CONFIGURE       ON
        LOG_BUILD           ON
        LOG_TEST            ON
        LOG_INSTALL         ON
    )
	ExternalProject_Get_Property(PortAudio SOURCE_DIR)
	ExternalProject_Get_Property(PortAudio BINARY_DIR)
	set(PORTAUDIO_SOURCE_DIR ${SOURCE_DIR})
	set(PORTAUDIO_BINARY_DIR ${BINARY_DIR})
    if (APPLE)
        set(PORTAUDIO_LIBRARIES ${PORTAUDIO_SOURCE_DIR}/libportaudio.dylib)
    elseif (UNIX)
        set(PORTAUDIO_LIBRARIES ${PORTAUDIO_SOURCE_DIR}/libportaudio.so)
    endif ()
    set(DEPENDENCIES ${DEPENDENCIES} PortAudio)
    include_directories(${PORTAUDIO_SOURCE_DIR}/include)
endif ()
SET(LIBS ${LIBS} ${PORTAUDIO_LIBRARIES})

#
# libsndfile
#

find_package(LibSndFile)
if (${LIBSNDFILE_FOUND})
    include_directories(${LIBSNDFILE_INCLUDE_DIRS})
else ()
	ExternalProject_Add(
		LibSndFile
		GIT_REPOSITORY  	"https://github.com/syb0rg/libsndfile.git"
		SOURCE_DIR          ${CMAKE_BINARY_DIR}/lib/LibSndFile
		UPDATE_COMMAND      ""
		INSTALL_COMMAND     ""
        BUILD_IN_SOURCE     ON
		LOG_DOWNLOAD        ON
		LOG_UPDATE          ON
		LOG_CONFIGURE       ON
		LOG_BUILD           ON
		LOG_TEST            ON
		LOG_INSTALL         ON
	)
    ExternalProject_Get_Property(LibSndFile SOURCE_DIR)
    ExternalProject_Get_Property(LibSndFile BINARY_DIR)
    set(LIBSNDFILE_SOURCE_DIR ${SOURCE_DIR})
    set(LIBSNDFILE_BINARY_DIR ${BINARY_DIR})
    set(LIBSNDFILE_LIBRARIES ${LIBSNDFILE_SOURCE_DIR}/libsndfile_static.a)
    set(DEPENDENCIES ${DEPENDENCIES} LibSndFile)
    include_directories(${LIBSNDFILE_SOURCE_DIR}/src)
endif ()
set(LIBS ${LIBS} ${LIBSNDFILE_LIBRARIES})

#
# tritium
#

find_package(tritium)
if (${TRITIUM_FOUND})
    include_directories(${TRITIUM_INCLUDE_DIR}/tritium)
else ()
    ExternalProject_Add(
        tritium
        GIT_REPOSITORY  "https://github.com/syb0rg/tritium.git"
        SOURCE_DIR      ${CMAKE_BINARY_DIR}/lib/tritium
        UPDATE_COMMAND  ""
        INSTALL_COMMAND ""
        BUILD_IN_SOURCE ON
        LOG_DOWNLOAD    ON
        LOG_UPDATE      ON
        LOG_CONFIGURE   ON
        LOG_BUILD       ON
        LOG_TEST        ON
        LOG_INSTALL     ON
    )
    ExternalProject_Get_Property(tritium SOURCE_DIR)
    ExternalProject_Get_Property(tritium BINARY_DIR)
    set(TRITIUM_SOURCE_DIR ${SOURCE_DIR})
    set(TRITIUM_BINARY_DIR ${BINARY_DIR})
    set(TRITIUM_LIBRARIES ${TRITIUM_SOURCE_DIR}/libtritium.a)
    set(DEPENDENCIES ${DEPENDENCIES} tritium)
    include_directories(${TRITIUM_SOURCE_DIR}/include)
endif ()
set(LIBS ${LIBS} ${TRITIUM_LIBRARIES})

#
# system
#

set(LIBS ${LIBS} m)
